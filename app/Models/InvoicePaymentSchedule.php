<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class InvoicePaymentSchedule extends Model
{
    use HasFactory;

    protected $fillable = [
        'invoice_id',
        'payment_type',
        'due_date',
        'expected_amount',
        'paid_amount',
        'status',
        'payment_order',
        'is_auto_generated',
    ];

    protected $casts = [
        'due_date' => 'date',
        'expected_amount' => 'decimal:2',
        'paid_amount' => 'decimal:2',
        'is_auto_generated' => 'boolean',
    ];

    protected $appends = [
        'formatted_expected_amount',
        'formatted_paid_amount',
        'formatted_remaining_amount',
        'status_text',
        'is_overdue',
    ];

    /**
     * Get the invoice that owns the payment schedule.
     */
    public function invoice(): BelongsTo
    {
        return $this->belongsTo(Invoice::class);
    }

    /**
     * Get formatted expected amount attribute.
     */
    public function getFormattedExpectedAmountAttribute(): string
    {
        return 'â‚±' . number_format($this->expected_amount, 2);
    }

    /**
     * Get formatted paid amount attribute.
     */
    public function getFormattedPaidAmountAttribute(): string
    {
        return 'â‚±' . number_format($this->paid_amount, 2);
    }

    /**
     * Get formatted remaining amount attribute.
     */
    public function getFormattedRemainingAmountAttribute(): string
    {
        $remaining = $this->expected_amount - $this->paid_amount;
        return 'â‚±' . number_format($remaining, 2);
    }

    /**
     * Get status text attribute.
     */
    public function getStatusTextAttribute(): string
    {
        return match($this->status) {
            'pending' => 'Pending',
            'paid' => 'Paid',
            'overdue' => 'Overdue',
            'partial' => 'Partially Paid',
            default => 'Unknown',
        };
    }

    /**
     * Get is overdue attribute.
     */
    public function getIsOverdueAttribute(): bool
    {
        return $this->due_date < now()->toDateString() && $this->status !== 'paid';
    }

    /**
     * Scope a query to only include pending schedules.
     */
    public function scopePending($query)
    {
        return $query->where('status', 'pending');
    }

    /**
     * Scope a query to only include paid schedules.
     */
    public function scopePaid($query)
    {
        return $query->where('status', 'paid');
    }

    /**
     * Scope a query to only include overdue schedules.
     */
    public function scopeOverdue($query)
    {
        return $query->where('status', 'overdue');
    }

    /**
     * Scope a query to only include partially paid schedules.
     */
    public function scopePartial($query)
    {
        return $query->where('status', 'partial');
    }

    /**
     * Scope a query to only include auto-generated schedules.
     */
    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    /**
     * Scope a query to only include manual schedules.
     */
    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }

    /**
     * Scope a query to filter by payment type.
     */
    public function scopeByPaymentType($query, $paymentType)
    {
        return $query->where('payment_type', $paymentType);
    }

    /**
     * Scope a query to filter by invoice.
     */
    public function scopeByInvoice($query, $invoiceId)
    {
        return $query->where('invoice_id', $invoiceId);
    }

    /**
     * Scope a query to filter by due date range.
     */
    public function scopeByDueDateRange($query, $startDate, $endDate)
    {
        return $query->whereBetween('due_date', [$startDate, $endDate]);
    }

    /**
     * Update payment amount and status.
     */
    public function updatePayment($amount)
    {
        $this->paid_amount += $amount;
        
        if ($this->paid_amount >= $this->expected_amount) {
            $this->status = 'paid';
        } elseif ($this->paid_amount > 0) {
            $this->status = 'partial';
        } else {
            $this->status = 'pending';
        }
        
        // Check if overdue
        if ($this->due_date < now()->toDateString() && $this->status !== 'paid') {
            $this->status = 'overdue';
        }
        
        $this->save();
        return $this;
    }
}